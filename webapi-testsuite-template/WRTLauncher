#!/usr/bin/python
#
# Copyright (c) 2012 Intel Corporation.
# 
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 
# *Redistributions of works must retain the original copyright notice, this list
# of conditions and the following disclaimer.
# *Redistributions in binary form must reproduce the original copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# *Neither the name of Intel Corporation nor the names of its contributors
# may be used to endorse or promote products derived from this work without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY INTEL CORPORATION "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL INTEL CORPORATION BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors:
#             Huajun Li <huajun.li@intel.com>
#

import os
import sys
import time
import signal
import commands

# need json module to parse chromium browser's configuration
#import json

wgt_launcher  = "wrt-client"
crx_launcher  = "chromium-browser"
aul_launcher  = "aul_test"
crx_launcher_params = """  --enable-plugins --enable-device-motion --enable-extensions --enable-user-scripts --enable-printing --enable-sync --enable-experimental-extension-apis --disable-accelerated-2d-canvas --use-gl=egl --ignore-gpu-blacklist --gpu-no-context-lost --auto-ssl-client-auth"""

launcher_list = [wgt_launcher, crx_launcher]

crx_launcher_conf = "/.config/chromium/Default/Preferences"

pid = ""
def on_signal(signum, stackframe):
    """
        Handle system exit handler.
    """
    if pid:
        os.system("kill %s" % pid);

    os._exit(1)
    return 0

def get_launcher():
    launcher = ""
    for i in range(len(launcher_list)):
        #on some image, there lacks of 'which' command
        #ret = commands.getstatusoutput("which %s > /dev/null 2>&1" % launcher_list[i])
        ret = commands.getstatusoutput("%s > /dev/null 2>&1" % launcher_list[i])
        if ret[0] == 0:
            launcher = launcher_list[i]
            break

    return launcher


def usage():
    print '''Usage: WRTLauncher  widget_name'''
    print '''Example: if your installed widget is "my_widget.wgt" or "my_widget.crx", you can launcher it by:  WRTLauncher my_widget'''
    


if __name__ == "__main__":
    if (len(sys.argv) < 2):
        usage()
        sys.exit(1)

    testsuite = sys.argv[1]
    launcher = get_launcher()

    cmd = ""
    pkg_id = ""
    pkg_root = ""
    if not launcher:
        print "No such web runtimes: %s" % launcher
        sys.exit(-1)

    print "Find web runtime launcher: " + launcher 
    #Register Ctrl-C handler.
    signal.signal(signal.SIGINT, on_signal)

    if launcher == wgt_launcher:
        #cmd = "%s -l | grep %s | tail -n 1 | awk '{ print $2 }'" % ("wrt-launcher", testsuite)
        #cmd = "%s -l 2> /dev/null | grep %s | tail -n 1 | awk '{ print $NF }' | awk -F'.' '{ print $3 }'" % ("wrt-launcher", testsuite)
        cmd = "%s -l 2> /dev/null | grep %s | tail -n 1 | awk '{ print $NF }'" % ("wrt-launcher", testsuite)
        pkg_id = commands.getoutput(cmd)
        if pkg_id:
            #on some image, there lacks of 'which' command
            #ret = commands.getstatusoutput("which %s > /dev/null 2>&1" % aul_launcher)
            ret = commands.getstatusoutput("%s > /dev/null 2>&1" % aul_launcher)
            if ret[0] == 0:
                cmd = "%s launch %s 2> /dev/null | awk -F'ret = ' '{print $2}'" % (aul_launcher, pkg_id)
                pid = commands.getoutput(cmd)
                pid = pid.replace("\n", "")
                cmd = "ps -ef | grep %s | grep %s | wc -l" % (pid, pkg_id)
                if pid:
                    print "Launch test by cmd: \"%s launch %s\"" % (aul_launcher, pkg_id)
                    while True:
                        ret = commands.getoutput(cmd)
                        if ret == '1':  #the test widget exits
                            break
                        time.sleep(1)
                else:
                    print "Fail to launch test \"%s\" by %s launch" % (testsuite, aul_launcher)
            else: #Launch the test by wrt-client
                cmd = "%s -l 2> /dev/null | grep %s | tail -n 1 | awk '{ print $2 }'" % ("wrt-launcher", testsuite)
                pkg_id = commands.getoutput(cmd)
                cmd = "%s -l %s" % (launcher, pkg_id)
                os.system(cmd)
        else:
            print "Fail to find package id of test suite \"%s\"" % testsuite
    elif launcher == crx_launcher:
        try:
            import subprocess

            #unpacked crx location is created while installing rpm package of the test suite
            crx_location = "/opt/unpacked_crx/" + testsuite
            if not os.path.isdir(crx_location):
                print "No such unpacked crx test suite \"%s\"" % crx_location
                sys.exit(-1)

            inst_crx_cmd = launcher + "  --load-extension=" + crx_location
            proc = subprocess.Popen(inst_crx_cmd, shell=True)
            #Wait for browser installs the pkg
            time.sleep(5)
            proc.terminate()
            #Wait for browser updates its configuration file
            time.sleep(5)
        except Exception, e:
            print "Exception occurs while installing the unpacked test suite \"%s\"" % crx_location 
            sys.exit(-1)

        try:
            import json
            home = commands.getoutput("echo $HOME")
            crx_launcher_conf = home + crx_launcher_conf
            if os.path.isfile(crx_launcher_conf):
                conf = json.loads(open(crx_launcher_conf).read())
                if conf["extensions"] and conf["extensions"]["settings"]:
                    settings = conf["extensions"]["settings"]
                    for ext_id in settings:
                        ext = settings[ext_id]
                        for key in ext:
                            if (key == "path") and (ext[key].endswith(testsuite)):
                                pkg_id = ext_id
                                pkg_root = ext[key]
                                break

                        if pkg_id and pkg_root:
                            break #break loop: for ext_id in settings:
        except Exception, e:
            print "Exception occurs while finding package id of testsuite \"testsuite\""

        if pkg_id and pkg_root:
            cmd = "%s %s chrome-extension://%s/index.html" % (launcher, crx_launcher_params, pkg_id)
            os.system(cmd)
        else:
            print "Fail to find package id of test suite \"%s\"" % testsuite


